
AVRASM ver. 2.1.30  E:\Micro\Project\Master\Debug\List\MASTER.asm Sun Jan 26 09:17:43 2020

E:\Micro\Project\Master\Debug\List\MASTER.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1092): warning: Register r9 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1093): warning: Register r8 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1095): warning: Register r12 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\Micro\Project\Master\Debug\List\MASTER.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temp1=R4
                 	.DEF _temp1_msb=R5
                 	.DEF _temp2=R6
                 	.DEF _temp2_msb=R7
                 	.DEF _slave1=R9
                 	.DEF _slave2=R8
                 	.DEF _slave3=R11
                 	.DEF _status=R12
                 	.DEF _status_msb=R13
                 	.DEF _rx_wr_index=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0085 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 00ca 	JMP  _usart_tx_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 fffd
000037 fe00      	.DB  0xFD,0xFF,0x0,0xFE
000038 0000      	.DB  0x0,0x0
                 
                 _0x0:
000039 6425
00003a 000a
00003b 6425
00003c 3100      	.DB  0x25,0x64,0xA,0x0,0x25,0x64,0x0,0x31
00003d 7400
00003e 3a31
00003f 6425
000040 740a      	.DB  0x0,0x74,0x31,0x3A,0x25,0x64,0xA,0x74
000041 3a32
000042 6425
000043 6d00
000044 3a31      	.DB  0x32,0x3A,0x25,0x64,0x0,0x6D,0x31,0x3A
000045 6425
000046 6d0a
000047 3a32
000048 6425      	.DB  0x25,0x64,0xA,0x6D,0x32,0x3A,0x25,0x64
E:\Micro\Project\Master\Debug\List\MASTER.asm(1149): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x0
                 _0x2000003:
00004a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004b 0001      	.DW  0x01
00004c 0002      	.DW  0x02
00004d 0066      	.DW  __REG_BIT_VARS*2
                 
00004e 000a      	.DW  0x0A
00004f 0004      	.DW  0x04
000050 0068      	.DW  __REG_VARS*2
                 
000051 0002      	.DW  0x02
000052 0260      	.DW  _0x23
000053 0079      	.DW  _0x0*2+7
                 
000054 0002      	.DW  0x02
000055 0287      	.DW  __base_y_G100
000056 0094      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000058 94f8      	CLI
000059 27ee      	CLR  R30
00005a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bffb      	OUT  GICR,R31
00005d bfeb      	OUT  GICR,R30
00005e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000068 93ed      	ST   X+,R30
000069 9701      	SBIW R24,1
00006a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006b e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006d 9185      	LPM  R24,Z+
00006e 9195      	LPM  R25,Z+
00006f 9700      	SBIW R24,0
000070 f061      	BREQ __GLOBAL_INI_END
000071 91a5      	LPM  R26,Z+
000072 91b5      	LPM  R27,Z+
000073 9005      	LPM  R0,Z+
000074 9015      	LPM  R1,Z+
000075 01bf      	MOVW R22,R30
000076 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000077 9005      	LPM  R0,Z+
000078 920d      	ST   X+,R0
000079 9701      	SBIW R24,1
00007a f7e1      	BRNE __GLOBAL_INI_LOOP
00007b 01fb      	MOVW R30,R22
00007c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007e bfed      	OUT  SPL,R30
00007f e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000080 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000081 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000082 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000083 940c 0117 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/25/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Declare your global variables here
                 ;int temp1 = 0;
                 ;int temp2 = 0;
                 ;char slave1 = 255;
                 ;char slave2 = 253;
                 ;char slave3 = 254;
                 ;int status = 0;
                 ;char str[10] = "";
                 ;int m1 = 0;
                 ;int m2 = 0;
                 ;int t = 0;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0046 {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000085 93aa      	ST   -Y,R26
000086 93ea      	ST   -Y,R30
000087 93fa      	ST   -Y,R31
000088 b7ef      	IN   R30,SREG
000089 93ea      	ST   -Y,R30
                 ; 0000 0047 char status,data;
                 ; 0000 0048 status=UCSRA;
00008a 931a      	ST   -Y,R17
00008b 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00008c b11b      	IN   R17,11
                 ; 0000 0049 data=UDR;
00008d b10c      	IN   R16,12
                 ; 0000 004A if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00008e 2fe1      	MOV  R30,R17
00008f 71ec      	ANDI R30,LOW(0x1C)
000090 f4b1      	BRNE _0x3
                 ; 0000 004B    {
                 ; 0000 004C    rx_buffer[rx_wr_index++]=data;
000091 2dea      	MOV  R30,R10
000092 94a3      	INC  R10
000093 e0f0      	LDI  R31,0
000094 58ee      	SUBI R30,LOW(-_rx_buffer)
000095 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000096 8300      	ST   Z,R16
                 ; 0000 004D #if RX_BUFFER_SIZE == 256
                 ; 0000 004E    // special case for receiver buffer size=256
                 ; 0000 004F    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0050 #else
                 ; 0000 0051    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000097 e0e8      	LDI  R30,LOW(8)
000098 15ea      	CP   R30,R10
000099 f409      	BRNE _0x4
00009a 24aa      	CLR  R10
                 ; 0000 0052    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x4:
00009b 91a0 027b 	LDS  R26,_rx_counter
00009d 5faf      	SUBI R26,-LOW(1)
00009e 93a0 027b 	STS  _rx_counter,R26
0000a0 30a8      	CPI  R26,LOW(0x8)
0000a1 f429      	BRNE _0x5
                 ; 0000 0053       {
                 ; 0000 0054       rx_counter=0;
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 93e0 027b 	STS  _rx_counter,R30
                 ; 0000 0055       rx_buffer_overflow=1;
0000a5 9468      	SET
0000a6 f820      	BLD  R2,0
                 ; 0000 0056       }
                 ; 0000 0057 #endif
                 ; 0000 0058    }
                 _0x5:
                 ; 0000 0059 }
                 _0x3:
0000a7 9109      	LD   R16,Y+
0000a8 9119      	LD   R17,Y+
0000a9 c03e      	RJMP _0x41
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0060 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0061 char data;
                 ; 0000 0062 while (rx_counter==0);
0000aa 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x6:
0000ab 91e0 027b 	LDS  R30,_rx_counter
0000ad 30e0      	CPI  R30,0
0000ae f3e1      	BREQ _0x6
                 ; 0000 0063 data=rx_buffer[rx_rd_index++];
0000af 91e0 027a 	LDS  R30,_rx_rd_index
0000b1 5fef      	SUBI R30,-LOW(1)
0000b2 93e0 027a 	STS  _rx_rd_index,R30
0000b4 50e1      	SUBI R30,LOW(1)
0000b5 e0f0      	LDI  R31,0
0000b6 58ee      	SUBI R30,LOW(-_rx_buffer)
0000b7 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000b8 8110      	LD   R17,Z
                 ; 0000 0064 #if RX_BUFFER_SIZE != 256
                 ; 0000 0065 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000b9 91a0 027a 	LDS  R26,_rx_rd_index
0000bb 30a8      	CPI  R26,LOW(0x8)
0000bc f419      	BRNE _0x9
0000bd e0e0      	LDI  R30,LOW(0)
0000be 93e0 027a 	STS  _rx_rd_index,R30
                 ; 0000 0066 #endif
                 ; 0000 0067 #asm("cli")
                 _0x9:
0000c0 94f8      	cli
                 ; 0000 0068 --rx_counter;
0000c1 91e0 027b 	LDS  R30,_rx_counter
0000c3 50e1      	SUBI R30,LOW(1)
0000c4 93e0 027b 	STS  _rx_counter,R30
                 ; 0000 0069 #asm("sei")
0000c6 9478      	sei
                 ; 0000 006A return data;
0000c7 2fe1      	MOV  R30,R17
0000c8 9119      	LD   R17,Y+
0000c9 9508      	RET
                 ; 0000 006B }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0081 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000ca 93aa      	ST   -Y,R26
0000cb 93ea      	ST   -Y,R30
0000cc 93fa      	ST   -Y,R31
0000cd b7ef      	IN   R30,SREG
0000ce 93ea      	ST   -Y,R30
                 ; 0000 0082 if (tx_counter)
0000cf 91e0 0286 	LDS  R30,_tx_counter
0000d1 30e0      	CPI  R30,0
0000d2 f0a9      	BREQ _0xA
                 ; 0000 0083    {
                 ; 0000 0084    --tx_counter;
0000d3 50e1      	SUBI R30,LOW(1)
0000d4 93e0 0286 	STS  _tx_counter,R30
                 ; 0000 0085    UDR=tx_buffer[tx_rd_index++];
0000d6 91e0 0285 	LDS  R30,_tx_rd_index
0000d8 5fef      	SUBI R30,-LOW(1)
0000d9 93e0 0285 	STS  _tx_rd_index,R30
0000db 50e1      	SUBI R30,LOW(1)
0000dc e0f0      	LDI  R31,0
0000dd 58e4      	SUBI R30,LOW(-_tx_buffer)
0000de 4ffd      	SBCI R31,HIGH(-_tx_buffer)
0000df 81e0      	LD   R30,Z
0000e0 b9ec      	OUT  0xC,R30
                 ; 0000 0086 #if TX_BUFFER_SIZE != 256
                 ; 0000 0087    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000e1 91a0 0285 	LDS  R26,_tx_rd_index
0000e3 30a8      	CPI  R26,LOW(0x8)
0000e4 f419      	BRNE _0xB
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 93e0 0285 	STS  _tx_rd_index,R30
                 ; 0000 0088 #endif
                 ; 0000 0089    }
                 _0xB:
                 ; 0000 008A }
                 _0xA:
                 _0x41:
0000e8 91e9      	LD   R30,Y+
0000e9 bfef      	OUT  SREG,R30
0000ea 91f9      	LD   R31,Y+
0000eb 91e9      	LD   R30,Y+
0000ec 91a9      	LD   R26,Y+
0000ed 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0091 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0092 while (tx_counter == TX_BUFFER_SIZE);
0000ee 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xC:
0000ef 91a0 0286 	LDS  R26,_tx_counter
0000f1 30a8      	CPI  R26,LOW(0x8)
0000f2 f3e1      	BREQ _0xC
                 ; 0000 0093 #asm("cli")
0000f3 94f8      	cli
                 ; 0000 0094 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000f4 91e0 0286 	LDS  R30,_tx_counter
0000f6 30e0      	CPI  R30,0
0000f7 f411      	BRNE _0x10
0000f8 995d      	SBIC 0xB,5
0000f9 c018      	RJMP _0xF
                 _0x10:
                 ; 0000 0095    {
                 ; 0000 0096    tx_buffer[tx_wr_index++]=c;
0000fa 91e0 0284 	LDS  R30,_tx_wr_index
0000fc 5fef      	SUBI R30,-LOW(1)
0000fd 93e0 0284 	STS  _tx_wr_index,R30
0000ff 50e1      	SUBI R30,LOW(1)
000100 e0f0      	LDI  R31,0
000101 58e4      	SUBI R30,LOW(-_tx_buffer)
000102 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000103 81a8      	LD   R26,Y
000104 83a0      	STD  Z+0,R26
                 ; 0000 0097 #if TX_BUFFER_SIZE != 256
                 ; 0000 0098    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000105 91a0 0284 	LDS  R26,_tx_wr_index
000107 30a8      	CPI  R26,LOW(0x8)
000108 f419      	BRNE _0x12
000109 e0e0      	LDI  R30,LOW(0)
00010a 93e0 0284 	STS  _tx_wr_index,R30
                 ; 0000 0099 #endif
                 ; 0000 009A    ++tx_counter;
                 _0x12:
00010c 91e0 0286 	LDS  R30,_tx_counter
00010e 5fef      	SUBI R30,-LOW(1)
00010f 93e0 0286 	STS  _tx_counter,R30
                 ; 0000 009B    }
                 ; 0000 009C else
000111 c002      	RJMP _0x13
                 _0xF:
                 ; 0000 009D    UDR=c;
000112 81e8      	LD   R30,Y
000113 b9ec      	OUT  0xC,R30
                 ; 0000 009E #asm("sei")
                 _0x13:
000114 9478      	sei
                 ; 0000 009F }
000115 940c 02b8 	JMP  _0x2080006
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;void main(void)
                 ; 0000 00A7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00A8 // Declare your local variables here
                 ; 0000 00A9 
                 ; 0000 00AA // Input/Output Ports initialization
                 ; 0000 00AB // Port A initialization
                 ; 0000 00AC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00AD DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000117 e0e0      	LDI  R30,LOW(0)
000118 bbea      	OUT  0x1A,R30
                 ; 0000 00AE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00AF PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000119 bbeb      	OUT  0x1B,R30
                 ; 0000 00B0 
                 ; 0000 00B1 // Port B initialization
                 ; 0000 00B2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B3 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
00011a e0e7      	LDI  R30,LOW(7)
00011b bbe7      	OUT  0x17,R30
                 ; 0000 00B4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B5 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00011c e0e0      	LDI  R30,LOW(0)
00011d bbe8      	OUT  0x18,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Port C initialization
                 ; 0000 00B8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B9 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00011e bbe4      	OUT  0x14,R30
                 ; 0000 00BA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00BB PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00011f bbe5      	OUT  0x15,R30
                 ; 0000 00BC 
                 ; 0000 00BD // Port D initialization
                 ; 0000 00BE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00BF DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000120 bbe1      	OUT  0x11,R30
                 ; 0000 00C0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C1 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000121 bbe2      	OUT  0x12,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // Timer/Counter 0 initialization
                 ; 0000 00C4 // Clock source: System Clock
                 ; 0000 00C5 // Clock value: Timer 0 Stopped
                 ; 0000 00C6 // Mode: Normal top=0xFF
                 ; 0000 00C7 // OC0 output: Disconnected
                 ; 0000 00C8 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000122 bfe3      	OUT  0x33,R30
                 ; 0000 00C9 TCNT0=0x00;
000123 bfe2      	OUT  0x32,R30
                 ; 0000 00CA OCR0=0x00;
000124 bfec      	OUT  0x3C,R30
                 ; 0000 00CB 
                 ; 0000 00CC // Timer/Counter 1 initialization
                 ; 0000 00CD // Clock source: System Clock
                 ; 0000 00CE // Clock value: Timer1 Stopped
                 ; 0000 00CF // Mode: Normal top=0xFFFF
                 ; 0000 00D0 // OC1A output: Disconnected
                 ; 0000 00D1 // OC1B output: Disconnected
                 ; 0000 00D2 // Noise Canceler: Off
                 ; 0000 00D3 // Input Capture on Falling Edge
                 ; 0000 00D4 // Timer1 Overflow Interrupt: Off
                 ; 0000 00D5 // Input Capture Interrupt: Off
                 ; 0000 00D6 // Compare A Match Interrupt: Off
                 ; 0000 00D7 // Compare B Match Interrupt: Off
                 ; 0000 00D8 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000125 bdef      	OUT  0x2F,R30
                 ; 0000 00D9 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000126 bdee      	OUT  0x2E,R30
                 ; 0000 00DA TCNT1H=0x00;
000127 bded      	OUT  0x2D,R30
                 ; 0000 00DB TCNT1L=0x00;
000128 bdec      	OUT  0x2C,R30
                 ; 0000 00DC ICR1H=0x00;
000129 bde7      	OUT  0x27,R30
                 ; 0000 00DD ICR1L=0x00;
00012a bde6      	OUT  0x26,R30
                 ; 0000 00DE OCR1AH=0x00;
00012b bdeb      	OUT  0x2B,R30
                 ; 0000 00DF OCR1AL=0x00;
00012c bdea      	OUT  0x2A,R30
                 ; 0000 00E0 OCR1BH=0x00;
00012d bde9      	OUT  0x29,R30
                 ; 0000 00E1 OCR1BL=0x00;
00012e bde8      	OUT  0x28,R30
                 ; 0000 00E2 
                 ; 0000 00E3 // Timer/Counter 2 initialization
                 ; 0000 00E4 // Clock source: System Clock
                 ; 0000 00E5 // Clock value: Timer2 Stopped
                 ; 0000 00E6 // Mode: Normal top=0xFF
                 ; 0000 00E7 // OC2 output: Disconnected
                 ; 0000 00E8 ASSR=0<<AS2;
00012f bde2      	OUT  0x22,R30
                 ; 0000 00E9 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000130 bde5      	OUT  0x25,R30
                 ; 0000 00EA TCNT2=0x00;
000131 bde4      	OUT  0x24,R30
                 ; 0000 00EB OCR2=0x00;
000132 bde3      	OUT  0x23,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00EE TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000133 bfe9      	OUT  0x39,R30
                 ; 0000 00EF 
                 ; 0000 00F0 // External Interrupt(s) initialization
                 ; 0000 00F1 // INT0: Off
                 ; 0000 00F2 // INT1: Off
                 ; 0000 00F3 // INT2: Off
                 ; 0000 00F4 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000134 bfe5      	OUT  0x35,R30
                 ; 0000 00F5 MCUCSR=(0<<ISC2);
000135 bfe4      	OUT  0x34,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // USART initialization
                 ; 0000 00F8 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00F9 // USART Receiver: On
                 ; 0000 00FA // USART Transmitter: On
                 ; 0000 00FB // USART Mode: Asynchronous
                 ; 0000 00FC // USART Baud Rate: 9600 (Double Speed Mode)
                 ; 0000 00FD UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (1<<U2X) | (0<<MPCM);
000136 e0e2      	LDI  R30,LOW(2)
000137 b9eb      	OUT  0xB,R30
                 ; 0000 00FE UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000138 ede8      	LDI  R30,LOW(216)
000139 b9ea      	OUT  0xA,R30
                 ; 0000 00FF UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00013a e8e6      	LDI  R30,LOW(134)
00013b bde0      	OUT  0x20,R30
                 ; 0000 0100 UBRRH=0x00;
00013c e0e0      	LDI  R30,LOW(0)
00013d bde0      	OUT  0x20,R30
                 ; 0000 0101 UBRRL=0x67;
00013e e6e7      	LDI  R30,LOW(103)
00013f b9e9      	OUT  0x9,R30
                 ; 0000 0102 
                 ; 0000 0103 // Analog Comparator initialization
                 ; 0000 0104 // Analog Comparator: Off
                 ; 0000 0105 // The Analog Comparator's positive input is
                 ; 0000 0106 // connected to the AIN0 pin
                 ; 0000 0107 // The Analog Comparator's negative input is
                 ; 0000 0108 // connected to the AIN1 pin
                 ; 0000 0109 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000140 e8e0      	LDI  R30,LOW(128)
000141 b9e8      	OUT  0x8,R30
                 ; 0000 010A SFIOR=(0<<ACME);
000142 e0e0      	LDI  R30,LOW(0)
000143 bfe0      	OUT  0x30,R30
                 ; 0000 010B 
                 ; 0000 010C // ADC initialization
                 ; 0000 010D // ADC disabled
                 ; 0000 010E ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000144 b9e6      	OUT  0x6,R30
                 ; 0000 010F 
                 ; 0000 0110 // SPI initialization
                 ; 0000 0111 // SPI disabled
                 ; 0000 0112 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000145 b9ed      	OUT  0xD,R30
                 ; 0000 0113 
                 ; 0000 0114 // TWI initialization
                 ; 0000 0115 // TWI disabled
                 ; 0000 0116 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000146 bfe6      	OUT  0x36,R30
                 ; 0000 0117 
                 ; 0000 0118 // Alphanumeric LCD initialization
                 ; 0000 0119 // Connections are specified in the
                 ; 0000 011A // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 011B // RS - PORTC Bit 0
                 ; 0000 011C // RD - PORTC Bit 1
                 ; 0000 011D // EN - PORTC Bit 2
                 ; 0000 011E // D4 - PORTC Bit 4
                 ; 0000 011F // D5 - PORTC Bit 5
                 ; 0000 0120 // D6 - PORTC Bit 6
                 ; 0000 0121 // D7 - PORTC Bit 7
                 ; 0000 0122 // Characters/line: 8
                 ; 0000 0123 lcd_init(8);
000147 e0a8      	LDI  R26,LOW(8)
000148 d142      	RCALL _lcd_init
                 ; 0000 0124 
                 ; 0000 0125 // Global enable interrupts
                 ; 0000 0126 #asm("sei")
000149 9478      	sei
                 ; 0000 0127 
                 ; 0000 0128 while (1)
                 _0x14:
                 ; 0000 0129       {
                 ; 0000 012A       // Place your code here
                 ; 0000 012B         PORTB.0 = 0;
00014a 98c0      	CBI  0x18,0
                 ; 0000 012C         PORTB.1 = 0;
00014b 940e 0631 	CALL SUBOPT_0x0
                 ; 0000 012D         PORTB.2 = 0;
                 ; 0000 012E         printf("%d\n",slave1);
00014d 2de9      	MOV  R30,R9
00014e 940e 0638 	CALL SUBOPT_0x1
                 ; 0000 012F         scanf("%d",&temp1);
                +
000150 e0e4     +LDI R30 , LOW ( 0x4 )
000151 e0f0     +LDI R31 , HIGH ( 0x4 )
000152 e060     +LDI R22 , BYTE3 ( 0x4 )
000153 e070     +LDI R23 , BYTE4 ( 0x4 )
                 	__GETD1N 0x4
000154 940e 0646 	CALL SUBOPT_0x2
                 ; 0000 0130         PORTB.0 = 0;
000156 98c0      	CBI  0x18,0
                 ; 0000 0131         PORTB.1 = 1;
000157 9ac1      	SBI  0x18,1
                 ; 0000 0132         PORTB.2 = 0;
000158 98c2      	CBI  0x18,2
                 ; 0000 0133         printf("%d\n",slave3);
000159 940e 064d 	CALL SUBOPT_0x3
00015b 2deb      	MOV  R30,R11
00015c 940e 0638 	CALL SUBOPT_0x1
                 ; 0000 0134         scanf("%d",&temp2);
                +
00015e e0e6     +LDI R30 , LOW ( 0x6 )
00015f e0f0     +LDI R31 , HIGH ( 0x6 )
000160 e060     +LDI R22 , BYTE3 ( 0x6 )
000161 e070     +LDI R23 , BYTE4 ( 0x6 )
                 	__GETD1N 0x6
000162 940e 0646 	CALL SUBOPT_0x2
                 ; 0000 0135         lcd_puts("1");
                +
000164 e6a0     +LDI R26 , LOW ( _0x23 + ( 0 ) )
000165 e0b2     +LDI R27 , HIGH ( _0x23 + ( 0 ) )
                 	__POINTW2MN _0x23,0
000166 d114      	RCALL _lcd_puts
                 ; 0000 0136         if(temp2 < 25){
000167 e1e9      	LDI  R30,LOW(25)
000168 e0f0      	LDI  R31,HIGH(25)
000169 166e      	CP   R6,R30
00016a 067f      	CPC  R7,R31
00016b f42c      	BRGE _0x24
                 ; 0000 0137             m1 = 10;
00016c e0ea      	LDI  R30,LOW(10)
00016d e0f0      	LDI  R31,HIGH(10)
00016e 940e 0652 	CALL SUBOPT_0x4
                 ; 0000 0138         }
                 ; 0000 0139         else if(temp2 >= 25 && temp2 <= 30){
000170 c02f      	RJMP _0x25
                 _0x24:
000171 e1e9      	LDI  R30,LOW(25)
000172 e0f0      	LDI  R31,HIGH(25)
000173 166e      	CP   R6,R30
000174 067f      	CPC  R7,R31
000175 f02c      	BRLT _0x27
000176 e1ee      	LDI  R30,LOW(30)
000177 e0f0      	LDI  R31,HIGH(30)
000178 15e6      	CP   R30,R6
000179 05f7      	CPC  R31,R7
00017a f40c      	BRGE _0x28
                 _0x27:
00017b c005      	RJMP _0x26
                 _0x28:
                 ; 0000 013A             m1 = 50;
00017c e3e2      	LDI  R30,LOW(50)
00017d e0f0      	LDI  R31,HIGH(50)
00017e 940e 0652 	CALL SUBOPT_0x4
                 ; 0000 013B         }
                 ; 0000 013C         else if(temp2 >= 31 && temp2 <= 35){
000180 c01f      	RJMP _0x29
                 _0x26:
000181 e1ef      	LDI  R30,LOW(31)
000182 e0f0      	LDI  R31,HIGH(31)
000183 166e      	CP   R6,R30
000184 067f      	CPC  R7,R31
000185 f02c      	BRLT _0x2B
000186 e2e3      	LDI  R30,LOW(35)
000187 e0f0      	LDI  R31,HIGH(35)
000188 15e6      	CP   R30,R6
000189 05f7      	CPC  R31,R7
00018a f40c      	BRGE _0x2C
                 _0x2B:
00018b c005      	RJMP _0x2A
                 _0x2C:
                 ; 0000 013D             m1 = 150;
00018c e9e6      	LDI  R30,LOW(150)
00018d e0f0      	LDI  R31,HIGH(150)
00018e 940e 0652 	CALL SUBOPT_0x4
                 ; 0000 013E         }
                 ; 0000 013F         else if(temp2 >= 36){
000190 c00f      	RJMP _0x2D
                 _0x2A:
000191 e2e4      	LDI  R30,LOW(36)
000192 e0f0      	LDI  R31,HIGH(36)
000193 166e      	CP   R6,R30
000194 067f      	CPC  R7,R31
000195 f02c      	BRLT _0x2E
                 ; 0000 0140             m1 = 250;
000196 efea      	LDI  R30,LOW(250)
000197 e0f0      	LDI  R31,HIGH(250)
000198 940e 0652 	CALL SUBOPT_0x4
                 ; 0000 0141         }
                 ; 0000 0142         else{
00019a c005      	RJMP _0x2F
                 _0x2E:
                 ; 0000 0143             m1 = 0;
00019b e0e0      	LDI  R30,LOW(0)
00019c 93e0 026c 	STS  _m1,R30
00019e 93e0 026d 	STS  _m1+1,R30
                 ; 0000 0144         }
                 _0x2F:
                 _0x2D:
                 _0x29:
                 _0x25:
                 ; 0000 0145           printf("%d\n",m1);
0001a0 940e 064d 	CALL SUBOPT_0x3
0001a2 91e0 026c 	LDS  R30,_m1
0001a4 91f0 026d 	LDS  R31,_m1+1
0001a6 940e 0657 	CALL SUBOPT_0x5
                 ; 0000 0146         t = m1;
0001a8 91e0 026c 	LDS  R30,_m1
0001aa 91f0 026d 	LDS  R31,_m1+1
0001ac 93e0 0270 	STS  _t,R30
0001ae 93f0 0271 	STS  _t+1,R31
                 ; 0000 0147         PORTB.0 = 1;
0001b0 9ac0      	SBI  0x18,0
                 ; 0000 0148         PORTB.1 = 0;
0001b1 940e 0631 	CALL SUBOPT_0x0
                 ; 0000 0149         PORTB.2 = 0;
                 ; 0000 014A         printf("%d\n",slave2);
0001b3 2de8      	MOV  R30,R8
0001b4 940e 0638 	CALL SUBOPT_0x1
                 ; 0000 014B         scanf("%d",&status);
                +
0001b6 e0ec     +LDI R30 , LOW ( 0xC )
0001b7 e0f0     +LDI R31 , HIGH ( 0xC )
0001b8 e060     +LDI R22 , BYTE3 ( 0xC )
0001b9 e070     +LDI R23 , BYTE4 ( 0xC )
                 	__GETD1N 0xC
0001ba 940e 0646 	CALL SUBOPT_0x2
                 ; 0000 014C         if(status == 1){
0001bc e0e1      	LDI  R30,LOW(1)
0001bd e0f0      	LDI  R31,HIGH(1)
0001be 15ec      	CP   R30,R12
0001bf 05fd      	CPC  R31,R13
0001c0 f531      	BRNE _0x36
                 ; 0000 014D             if((temp2 - temp1) == 0){
0001c1 01f3      	MOVW R30,R6
0001c2 19e4      	SUB  R30,R4
0001c3 09f5      	SBC  R31,R5
0001c4 f431      	BRNE _0x37
                 ; 0000 014E                 m2 = 0;
0001c5 e0e0      	LDI  R30,LOW(0)
0001c6 93e0 026e 	STS  _m2,R30
0001c8 93e0 026f 	STS  _m2+1,R30
                 ; 0000 014F             }
                 ; 0000 0150             else if((temp2 - temp1) == 5){
0001ca c01b      	RJMP _0x38
                 _0x37:
0001cb 01d3      	MOVW R26,R6
0001cc 19a4      	SUB  R26,R4
0001cd 09b5      	SBC  R27,R5
0001ce 9715      	SBIW R26,5
0001cf f419      	BRNE _0x39
                 ; 0000 0151                 m2 = 50;
0001d0 e3e2      	LDI  R30,LOW(50)
0001d1 e0f0      	LDI  R31,HIGH(50)
0001d2 c00f      	RJMP _0x40
                 ; 0000 0152             }
                 ; 0000 0153             else if((temp2 - temp1) == 10){
                 _0x39:
0001d3 01d3      	MOVW R26,R6
0001d4 19a4      	SUB  R26,R4
0001d5 09b5      	SBC  R27,R5
0001d6 971a      	SBIW R26,10
0001d7 f419      	BRNE _0x3B
                 ; 0000 0154                 m2 = 150;
0001d8 e9e6      	LDI  R30,LOW(150)
0001d9 e0f0      	LDI  R31,HIGH(150)
0001da c007      	RJMP _0x40
                 ; 0000 0155             }
                 ; 0000 0156             else if((temp2 - temp1) == 15){
                 _0x3B:
0001db 01d3      	MOVW R26,R6
0001dc 19a4      	SUB  R26,R4
0001dd 09b5      	SBC  R27,R5
0001de 971f      	SBIW R26,15
0001df f431      	BRNE _0x3D
                 ; 0000 0157                 m2 = 250;
0001e0 efea      	LDI  R30,LOW(250)
0001e1 e0f0      	LDI  R31,HIGH(250)
                 _0x40:
0001e2 93e0 026e 	STS  _m2,R30
0001e4 93f0 026f 	STS  _m2+1,R31
                 ; 0000 0158             }
                 ; 0000 0159         }
                 _0x3D:
                 _0x38:
                 ; 0000 015A         else{
0001e6 c005      	RJMP _0x3E
                 _0x36:
                 ; 0000 015B             m2 = 0;
0001e7 e0e0      	LDI  R30,LOW(0)
0001e8 93e0 026e 	STS  _m2,R30
0001ea 93e0 026f 	STS  _m2+1,R30
                 ; 0000 015C         }
                 _0x3E:
                 ; 0000 015D         printf("%d\n",m2);
0001ec 940e 064d 	CALL SUBOPT_0x3
0001ee 91e0 026e 	LDS  R30,_m2
0001f0 91f0 026f 	LDS  R31,_m2+1
0001f2 940e 0657 	CALL SUBOPT_0x5
                 ; 0000 015E         sprintf(str, "t1:%d\nt2:%d", temp1, temp2);
0001f4 e6e2      	LDI  R30,LOW(_str)
0001f5 e0f2      	LDI  R31,HIGH(_str)
0001f6 93fa      	ST   -Y,R31
0001f7 93ea      	ST   -Y,R30
                +
0001f8 e7eb     +LDI R30 , LOW ( 2 * _0x0 + ( 9 ) )
0001f9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 9 ) )
                 	__POINTW1FN _0x0,9
0001fa 93fa      	ST   -Y,R31
0001fb 93ea      	ST   -Y,R30
0001fc 01f2      	MOVW R30,R4
0001fd 940e 0660 	CALL SUBOPT_0x6
0001ff 01f3      	MOVW R30,R6
000200 940e 0660 	CALL SUBOPT_0x6
000202 940e 0665 	CALL SUBOPT_0x7
                 ; 0000 015F         lcd_clear();
                 ; 0000 0160         lcd_puts(str);
                 ; 0000 0161         delay_ms(500);
                 ; 0000 0162         sprintf(str,"m1:%d\nm2:%d", t, m2);
000204 e6e2      	LDI  R30,LOW(_str)
000205 e0f2      	LDI  R31,HIGH(_str)
000206 93fa      	ST   -Y,R31
000207 93ea      	ST   -Y,R30
                +
000208 e8e7     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000209 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
00020a 93fa      	ST   -Y,R31
00020b 93ea      	ST   -Y,R30
00020c 91e0 0270 	LDS  R30,_t
00020e 91f0 0271 	LDS  R31,_t+1
000210 940e 0660 	CALL SUBOPT_0x6
000212 91e0 026e 	LDS  R30,_m2
000214 91f0 026f 	LDS  R31,_m2+1
000216 940e 0660 	CALL SUBOPT_0x6
000218 940e 0665 	CALL SUBOPT_0x7
                 ; 0000 0163         lcd_clear();
                 ; 0000 0164         lcd_puts(str);
                 ; 0000 0165         delay_ms(500);
                 ; 0000 0166       }
00021a cf2f      	RJMP _0x14
                 ; 0000 0167 }
                 _0x3F:
00021b cfff      	RJMP _0x3F
                 ; .FEND
                 
                 	.DSEG
                 _0x23:
000260           	.BYTE 0x2
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00021c 93aa      	ST   -Y,R26
00021d b3e5      	IN   R30,0x15
00021e 70ef      	ANDI R30,LOW(0xF)
00021f 2fae      	MOV  R26,R30
000220 81e8      	LD   R30,Y
000221 7fe0      	ANDI R30,LOW(0xF0)
000222 2bea      	OR   R30,R26
000223 bbe5      	OUT  0x15,R30
                +
000224 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000225 958a     +DEC R24
000226 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000227 9aaa      	SBI  0x15,2
                +
000228 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000229 958a     +DEC R24
00022a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00022b 98aa      	CBI  0x15,2
                +
00022c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00022d 958a     +DEC R24
00022e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00022f c088      	RJMP _0x2080006
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000230 93aa      	ST   -Y,R26
000231 81a8      	LD   R26,Y
000232 dfe9      	RCALL __lcd_write_nibble_G100
000233 81e8          ld    r30,y
000234 95e2          swap  r30
000235 83e8          st    y,r30
000236 81a8      	LD   R26,Y
000237 dfe4      	RCALL __lcd_write_nibble_G100
                +
000238 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000239 958a     +DEC R24
00023a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00023b c07c      	RJMP _0x2080006
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00023c 93aa      	ST   -Y,R26
00023d 81e8      	LD   R30,Y
00023e e0f0      	LDI  R31,0
00023f 57e9      	SUBI R30,LOW(-__base_y_G100)
000240 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000241 81e0      	LD   R30,Z
000242 81a9      	LDD  R26,Y+1
000243 0fae      	ADD  R26,R30
000244 dfeb      	RCALL __lcd_write_data
000245 81e9      	LDD  R30,Y+1
000246 93e0 028b 	STS  __lcd_x,R30
000248 81e8      	LD   R30,Y
000249 93e0 028c 	STS  __lcd_y,R30
00024b 9622      	ADIW R28,2
00024c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00024d e0a2      	LDI  R26,LOW(2)
00024e 940e 0673 	CALL SUBOPT_0x8
000250 e0ac      	LDI  R26,LOW(12)
000251 dfde      	RCALL __lcd_write_data
000252 e0a1      	LDI  R26,LOW(1)
000253 940e 0673 	CALL SUBOPT_0x8
000255 e0e0      	LDI  R30,LOW(0)
000256 93e0 028c 	STS  __lcd_y,R30
000258 93e0 028b 	STS  __lcd_x,R30
00025a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00025b 93aa      	ST   -Y,R26
00025c 81a8      	LD   R26,Y
00025d 30aa      	CPI  R26,LOW(0xA)
00025e f031      	BREQ _0x2000005
00025f 91e0 028d 	LDS  R30,__lcd_maxx
000261 91a0 028b 	LDS  R26,__lcd_x
000263 17ae      	CP   R26,R30
000264 f060      	BRLO _0x2000004
                 _0x2000005:
000265 e0e0      	LDI  R30,LOW(0)
000266 93ea      	ST   -Y,R30
000267 91a0 028c 	LDS  R26,__lcd_y
000269 5faf      	SUBI R26,-LOW(1)
00026a 93a0 028c 	STS  __lcd_y,R26
00026c dfcf      	RCALL _lcd_gotoxy
00026d 81a8      	LD   R26,Y
00026e 30aa      	CPI  R26,LOW(0xA)
00026f f409      	BRNE _0x2000007
000270 c047      	RJMP _0x2080006
                 _0x2000007:
                 _0x2000004:
000271 91e0 028b 	LDS  R30,__lcd_x
000273 5fef      	SUBI R30,-LOW(1)
000274 93e0 028b 	STS  __lcd_x,R30
000276 9aa8      	SBI  0x15,0
000277 81a8      	LD   R26,Y
000278 dfb7      	RCALL __lcd_write_data
000279 98a8      	CBI  0x15,0
00027a c03d      	RJMP _0x2080006
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00027b 93ba      	ST   -Y,R27
00027c 93aa      	ST   -Y,R26
00027d 931a      	ST   -Y,R17
                 _0x2000008:
00027e 81a9      	LDD  R26,Y+1
00027f 81ba      	LDD  R27,Y+1+1
000280 91ed      	LD   R30,X+
000281 83a9      	STD  Y+1,R26
000282 83ba      	STD  Y+1+1,R27
000283 2f1e      	MOV  R17,R30
000284 30e0      	CPI  R30,0
000285 f019      	BREQ _0x200000A
000286 2fa1      	MOV  R26,R17
000287 dfd3      	RCALL _lcd_putchar
000288 cff5      	RJMP _0x2000008
                 _0x200000A:
000289 8118      	LDD  R17,Y+0
00028a c038      	RJMP _0x2080005
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00028b 93aa      	ST   -Y,R26
00028c b3e4      	IN   R30,0x14
00028d 6fe0      	ORI  R30,LOW(0xF0)
00028e bbe4      	OUT  0x14,R30
00028f 9aa2      	SBI  0x14,2
000290 9aa0      	SBI  0x14,0
000291 9aa1      	SBI  0x14,1
000292 98aa      	CBI  0x15,2
000293 98a8      	CBI  0x15,0
000294 98a9      	CBI  0x15,1
000295 81e8      	LD   R30,Y
000296 93e0 028d 	STS  __lcd_maxx,R30
000298 58e0      	SUBI R30,-LOW(128)
                +
000299 93e0 0289+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00029b 81e8      	LD   R30,Y
00029c 54e0      	SUBI R30,-LOW(192)
                +
00029d 93e0 028a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00029f e1a4      	LDI  R26,LOW(20)
0002a0 e0b0      	LDI  R27,0
0002a1 940e 06d7 	CALL _delay_ms
0002a3 940e 0679 	CALL SUBOPT_0x9
0002a5 940e 0679 	CALL SUBOPT_0x9
0002a7 940e 0679 	CALL SUBOPT_0x9
0002a9 e2a0      	LDI  R26,LOW(32)
0002aa df71      	RCALL __lcd_write_nibble_G100
                +
0002ab ec88     +LDI R24 , LOW ( 200 )
0002ac e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002ad 9701     +SBIW R24 , 1
0002ae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002af e2a8      	LDI  R26,LOW(40)
0002b0 df7f      	RCALL __lcd_write_data
0002b1 e0a4      	LDI  R26,LOW(4)
0002b2 df7d      	RCALL __lcd_write_data
0002b3 e8a5      	LDI  R26,LOW(133)
0002b4 df7b      	RCALL __lcd_write_data
0002b5 e0a6      	LDI  R26,LOW(6)
0002b6 df79      	RCALL __lcd_write_data
0002b7 df95      	RCALL _lcd_clear
                 _0x2080006:
0002b8 9621      	ADIW R28,1
0002b9 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_usart_G101:
                 ; .FSTART _put_usart_G101
0002ba 93ba      	ST   -Y,R27
0002bb 93aa      	ST   -Y,R26
0002bc 81aa      	LDD  R26,Y+2
0002bd 940e 00ee 	CALL _putchar
0002bf 81a8      	LD   R26,Y
0002c0 81b9      	LDD  R27,Y+1
0002c1 940e 0681 	CALL SUBOPT_0xA
                 _0x2080005:
0002c3 9623      	ADIW R28,3
0002c4 9508      	RET
                 ; .FEND
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0002c5 93ba      	ST   -Y,R27
0002c6 93aa      	ST   -Y,R26
0002c7 931a      	ST   -Y,R17
0002c8 930a      	ST   -Y,R16
0002c9 81aa      	LDD  R26,Y+2
0002ca 81bb      	LDD  R27,Y+2+1
0002cb 9612      	ADIW R26,2
0002cc 940e 06f6 	CALL __GETW1P
0002ce 9730      	SBIW R30,0
0002cf f129      	BREQ _0x2020010
0002d0 81aa      	LDD  R26,Y+2
0002d1 81bb      	LDD  R27,Y+2+1
0002d2 9614      	ADIW R26,4
0002d3 940e 06f6 	CALL __GETW1P
0002d5 018f      	MOVW R16,R30
0002d6 9730      	SBIW R30,0
0002d7 f061      	BREQ _0x2020012
                +
0002d8 3002     +CPI R16 , LOW ( 2 )
0002d9 e0e0     +LDI R30 , HIGH ( 2 )
0002da 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002db f080      	BRLO _0x2020013
0002dc 01f8      	MOVW R30,R16
0002dd 9731      	SBIW R30,1
0002de 018f      	MOVW R16,R30
                +
0002df 81aa     +LDD R26 , Y + 2
0002e0 81bb     +LDD R27 , Y + 2 + 1
0002e1 9614     +ADIW R26 , 4
0002e2 93ed     +ST X + , R30
0002e3 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0002e4 81aa      	LDD  R26,Y+2
0002e5 81bb      	LDD  R27,Y+2+1
0002e6 9612      	ADIW R26,2
0002e7 940e 0681 	CALL SUBOPT_0xA
0002e9 9731      	SBIW R30,1
0002ea 81ac      	LDD  R26,Y+4
0002eb 83a0      	STD  Z+0,R26
                 _0x2020013:
0002ec 81aa      	LDD  R26,Y+2
0002ed 81bb      	LDD  R27,Y+2+1
0002ee 940e 06f6 	CALL __GETW1P
0002f0 23ff      	TST  R31
0002f1 f012      	BRMI _0x2020014
0002f2 940e 0681 	CALL SUBOPT_0xA
                 _0x2020014:
0002f4 c006      	RJMP _0x2020015
                 _0x2020010:
0002f5 81aa      	LDD  R26,Y+2
0002f6 81bb      	LDD  R27,Y+2+1
0002f7 efef      	LDI  R30,LOW(65535)
0002f8 efff      	LDI  R31,HIGH(65535)
0002f9 93ed      	ST   X+,R30
0002fa 93fc      	ST   X,R31
                 _0x2020015:
0002fb 8119      	LDD  R17,Y+1
0002fc 8108      	LDD  R16,Y+0
0002fd c196      	RJMP _0x2080003
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002fe 93ba      	ST   -Y,R27
0002ff 93aa      	ST   -Y,R26
000300 9726      	SBIW R28,6
000301 940e 0703 	CALL __SAVELOCR6
000303 e010      	LDI  R17,0
000304 85ac      	LDD  R26,Y+12
000305 85bd      	LDD  R27,Y+12+1
000306 e0e0      	LDI  R30,LOW(0)
000307 e0f0      	LDI  R31,HIGH(0)
000308 93ed      	ST   X+,R30
000309 93fc      	ST   X,R31
                 _0x2020016:
00030a 89ea      	LDD  R30,Y+18
00030b 89fb      	LDD  R31,Y+18+1
00030c 9631      	ADIW R30,1
00030d 8bea      	STD  Y+18,R30
00030e 8bfb      	STD  Y+18+1,R31
00030f 9731      	SBIW R30,1
000310 91e4      	LPM  R30,Z
000311 2f2e      	MOV  R18,R30
000312 30e0      	CPI  R30,0
000313 f409      	BRNE PC+2
000314 c115      	RJMP _0x2020018
000315 2fe1      	MOV  R30,R17
000316 30e0      	CPI  R30,0
000317 f439      	BRNE _0x202001C
000318 3225      	CPI  R18,37
000319 f411      	BRNE _0x202001D
00031a e011      	LDI  R17,LOW(1)
00031b c002      	RJMP _0x202001E
                 _0x202001D:
00031c 940e 0687 	CALL SUBOPT_0xB
                 _0x202001E:
00031e c10a      	RJMP _0x202001B
                 _0x202001C:
00031f 30e1      	CPI  R30,LOW(0x1)
000320 f4a9      	BRNE _0x202001F
000321 3225      	CPI  R18,37
000322 f419      	BRNE _0x2020020
000323 940e 0687 	CALL SUBOPT_0xB
000325 c102      	RJMP _0x20200CC
                 _0x2020020:
000326 e012      	LDI  R17,LOW(2)
000327 e040      	LDI  R20,LOW(0)
000328 e000      	LDI  R16,LOW(0)
000329 322d      	CPI  R18,45
00032a f411      	BRNE _0x2020021
00032b e001      	LDI  R16,LOW(1)
00032c c0fc      	RJMP _0x202001B
                 _0x2020021:
00032d 322b      	CPI  R18,43
00032e f411      	BRNE _0x2020022
00032f e24b      	LDI  R20,LOW(43)
000330 c0f8      	RJMP _0x202001B
                 _0x2020022:
000331 3220      	CPI  R18,32
000332 f411      	BRNE _0x2020023
000333 e240      	LDI  R20,LOW(32)
000334 c0f4      	RJMP _0x202001B
                 _0x2020023:
000335 c002      	RJMP _0x2020024
                 _0x202001F:
000336 30e2      	CPI  R30,LOW(0x2)
000337 f439      	BRNE _0x2020025
                 _0x2020024:
000338 e050      	LDI  R21,LOW(0)
000339 e013      	LDI  R17,LOW(3)
00033a 3320      	CPI  R18,48
00033b f411      	BRNE _0x2020026
00033c 6800      	ORI  R16,LOW(128)
00033d c0eb      	RJMP _0x202001B
                 _0x2020026:
00033e c003      	RJMP _0x2020027
                 _0x2020025:
00033f 30e3      	CPI  R30,LOW(0x3)
000340 f009      	BREQ PC+2
000341 c0e7      	RJMP _0x202001B
                 _0x2020027:
000342 3320      	CPI  R18,48
000343 f010      	BRLO _0x202002A
000344 332a      	CPI  R18,58
000345 f008      	BRLO _0x202002B
                 _0x202002A:
000346 c007      	RJMP _0x2020029
                 _0x202002B:
000347 e0aa      	LDI  R26,LOW(10)
000348 9f5a      	MUL  R21,R26
000349 2d50      	MOV  R21,R0
00034a 2fe2      	MOV  R30,R18
00034b 53e0      	SUBI R30,LOW(48)
00034c 0f5e      	ADD  R21,R30
00034d c0db      	RJMP _0x202001B
                 _0x2020029:
00034e 2fe2      	MOV  R30,R18
00034f 36e3      	CPI  R30,LOW(0x63)
000350 f449      	BRNE _0x202002F
000351 940e 068e 	CALL SUBOPT_0xC
000353 89e8      	LDD  R30,Y+16
000354 89f9      	LDD  R31,Y+16+1
000355 81a4      	LDD  R26,Z+4
000356 93aa      	ST   -Y,R26
000357 940e 0694 	CALL SUBOPT_0xD
000359 c0ce      	RJMP _0x2020030
                 _0x202002F:
00035a 37e3      	CPI  R30,LOW(0x73)
00035b f441      	BRNE _0x2020032
00035c 940e 068e 	CALL SUBOPT_0xC
00035e 940e 069a 	CALL SUBOPT_0xE
000360 940e 0618 	CALL _strlen
000362 2f1e      	MOV  R17,R30
000363 c00a      	RJMP _0x2020033
                 _0x2020032:
000364 37e0      	CPI  R30,LOW(0x70)
000365 f461      	BRNE _0x2020035
000366 940e 068e 	CALL SUBOPT_0xC
000368 940e 069a 	CALL SUBOPT_0xE
00036a 940e 0624 	CALL _strlenf
00036c 2f1e      	MOV  R17,R30
00036d 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00036e 6002      	ORI  R16,LOW(2)
00036f 770f      	ANDI R16,LOW(127)
000370 e030      	LDI  R19,LOW(0)
000371 c034      	RJMP _0x2020036
                 _0x2020035:
000372 36e4      	CPI  R30,LOW(0x64)
000373 f011      	BREQ _0x2020039
000374 36e9      	CPI  R30,LOW(0x69)
000375 f411      	BRNE _0x202003A
                 _0x2020039:
000376 6004      	ORI  R16,LOW(4)
000377 c002      	RJMP _0x202003B
                 _0x202003A:
000378 37e5      	CPI  R30,LOW(0x75)
000379 f431      	BRNE _0x202003C
                 _0x202003B:
00037a e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00037b e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00037c 83ee      	STD  Y+6,R30
00037d 83ff      	STD  Y+6+1,R31
00037e e015      	LDI  R17,LOW(5)
00037f c00c      	RJMP _0x202003D
                 _0x202003C:
000380 35e8      	CPI  R30,LOW(0x58)
000381 f411      	BRNE _0x202003F
000382 6008      	ORI  R16,LOW(8)
000383 c003      	RJMP _0x2020040
                 _0x202003F:
000384 37e8      	CPI  R30,LOW(0x78)
000385 f009      	BREQ PC+2
000386 c0a1      	RJMP _0x2020071
                 _0x2020040:
000387 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000388 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000389 83ee      	STD  Y+6,R30
00038a 83ff      	STD  Y+6+1,R31
00038b e014      	LDI  R17,LOW(4)
                 _0x202003D:
00038c ff02      	SBRS R16,2
00038d c014      	RJMP _0x2020042
00038e 940e 068e 	CALL SUBOPT_0xC
000390 940e 06a4 	CALL SUBOPT_0xF
000392 85ab      	LDD  R26,Y+11
000393 23aa      	TST  R26
000394 f43a      	BRPL _0x2020043
000395 85ea      	LDD  R30,Y+10
000396 85fb      	LDD  R31,Y+10+1
000397 940e 06e5 	CALL __ANEGW1
000399 87ea      	STD  Y+10,R30
00039a 87fb      	STD  Y+10+1,R31
00039b e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00039c 3040      	CPI  R20,0
00039d f011      	BREQ _0x2020044
00039e 5f1f      	SUBI R17,-LOW(1)
00039f c001      	RJMP _0x2020045
                 _0x2020044:
0003a0 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
0003a1 c004      	RJMP _0x2020046
                 _0x2020042:
0003a2 940e 068e 	CALL SUBOPT_0xC
0003a4 940e 06a4 	CALL SUBOPT_0xF
                 _0x2020046:
                 _0x2020036:
0003a6 fd00      	SBRC R16,0
0003a7 c011      	RJMP _0x2020047
                 _0x2020048:
0003a8 1715      	CP   R17,R21
0003a9 f478      	BRSH _0x202004A
0003aa ff07      	SBRS R16,7
0003ab c008      	RJMP _0x202004B
0003ac ff02      	SBRS R16,2
0003ad c004      	RJMP _0x202004C
0003ae 7f0b      	ANDI R16,LOW(251)
0003af 2f24      	MOV  R18,R20
0003b0 5011      	SUBI R17,LOW(1)
0003b1 c001      	RJMP _0x202004D
                 _0x202004C:
0003b2 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003b3 c001      	RJMP _0x202004E
                 _0x202004B:
0003b4 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003b5 940e 0687 	CALL SUBOPT_0xB
0003b7 5051      	SUBI R21,LOW(1)
0003b8 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003b9 2f31      	MOV  R19,R17
0003ba ff01      	SBRS R16,1
0003bb c017      	RJMP _0x202004F
                 _0x2020050:
0003bc 3030      	CPI  R19,0
0003bd f0a1      	BREQ _0x2020052
0003be ff03      	SBRS R16,3
0003bf c006      	RJMP _0x2020053
0003c0 81ee      	LDD  R30,Y+6
0003c1 81ff      	LDD  R31,Y+6+1
0003c2 9125      	LPM  R18,Z+
0003c3 83ee      	STD  Y+6,R30
0003c4 83ff      	STD  Y+6+1,R31
0003c5 c005      	RJMP _0x2020054
                 _0x2020053:
0003c6 81ae      	LDD  R26,Y+6
0003c7 81bf      	LDD  R27,Y+6+1
0003c8 912d      	LD   R18,X+
0003c9 83ae      	STD  Y+6,R26
0003ca 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003cb 940e 0687 	CALL SUBOPT_0xB
0003cd 3050      	CPI  R21,0
0003ce f009      	BREQ _0x2020055
0003cf 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003d0 5031      	SUBI R19,LOW(1)
0003d1 cfea      	RJMP _0x2020050
                 _0x2020052:
0003d2 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003d3 e320      	LDI  R18,LOW(48)
0003d4 81ee      	LDD  R30,Y+6
0003d5 81ff      	LDD  R31,Y+6+1
0003d6 940e 06fa 	CALL __GETW1PF
0003d8 87e8      	STD  Y+8,R30
0003d9 87f9      	STD  Y+8+1,R31
0003da 81ee      	LDD  R30,Y+6
0003db 81ff      	LDD  R31,Y+6+1
0003dc 9632      	ADIW R30,2
0003dd 83ee      	STD  Y+6,R30
0003de 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003df 85e8      	LDD  R30,Y+8
0003e0 85f9      	LDD  R31,Y+8+1
0003e1 85aa      	LDD  R26,Y+10
0003e2 85bb      	LDD  R27,Y+10+1
0003e3 17ae      	CP   R26,R30
0003e4 07bf      	CPC  R27,R31
0003e5 f050      	BRLO _0x202005C
0003e6 5f2f      	SUBI R18,-LOW(1)
0003e7 85a8      	LDD  R26,Y+8
0003e8 85b9      	LDD  R27,Y+8+1
0003e9 85ea      	LDD  R30,Y+10
0003ea 85fb      	LDD  R31,Y+10+1
0003eb 1bea      	SUB  R30,R26
0003ec 0bfb      	SBC  R31,R27
0003ed 87ea      	STD  Y+10,R30
0003ee 87fb      	STD  Y+10+1,R31
0003ef cfef      	RJMP _0x202005A
                 _0x202005C:
0003f0 332a      	CPI  R18,58
0003f1 f028      	BRLO _0x202005D
0003f2 ff03      	SBRS R16,3
0003f3 c002      	RJMP _0x202005E
0003f4 5f29      	SUBI R18,-LOW(7)
0003f5 c001      	RJMP _0x202005F
                 _0x202005E:
0003f6 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003f7 fd04      	SBRC R16,4
0003f8 c01a      	RJMP _0x2020061
0003f9 3321      	CPI  R18,49
0003fa f420      	BRSH _0x2020063
0003fb 85a8      	LDD  R26,Y+8
0003fc 85b9      	LDD  R27,Y+8+1
0003fd 9711      	SBIW R26,1
0003fe f409      	BRNE _0x2020062
                 _0x2020063:
0003ff c009      	RJMP _0x20200CD
                 _0x2020062:
000400 1753      	CP   R21,R19
000401 f010      	BRLO _0x2020067
000402 ff00      	SBRS R16,0
000403 c001      	RJMP _0x2020068
                 _0x2020067:
000404 c013      	RJMP _0x2020066
                 _0x2020068:
000405 e220      	LDI  R18,LOW(32)
000406 ff07      	SBRS R16,7
000407 c00b      	RJMP _0x2020069
000408 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
000409 6100      	ORI  R16,LOW(16)
00040a ff02      	SBRS R16,2
00040b c007      	RJMP _0x202006A
00040c 7f0b      	ANDI R16,LOW(251)
00040d 934a      	ST   -Y,R20
00040e 940e 0694 	CALL SUBOPT_0xD
000410 3050      	CPI  R21,0
000411 f009      	BREQ _0x202006B
000412 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000413 940e 0687 	CALL SUBOPT_0xB
000415 3050      	CPI  R21,0
000416 f009      	BREQ _0x202006C
000417 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000418 5031      	SUBI R19,LOW(1)
000419 85a8      	LDD  R26,Y+8
00041a 85b9      	LDD  R27,Y+8+1
00041b 9712      	SBIW R26,2
00041c f008      	BRLO _0x2020059
00041d cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00041e ff00      	SBRS R16,0
00041f c008      	RJMP _0x202006D
                 _0x202006E:
000420 3050      	CPI  R21,0
000421 f031      	BREQ _0x2020070
000422 5051      	SUBI R21,LOW(1)
000423 e2e0      	LDI  R30,LOW(32)
000424 93ea      	ST   -Y,R30
000425 940e 0694 	CALL SUBOPT_0xD
000427 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000428 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000429 cee0      	RJMP _0x2020016
                 _0x2020018:
00042a 85ac      	LDD  R26,Y+12
00042b 85bd      	LDD  R27,Y+12+1
00042c 940e 06f6 	CALL __GETW1P
00042e 940e 070a 	CALL __LOADLOCR6
000430 9664      	ADIW R28,20
000431 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000432 92ff      	PUSH R15
000433 2ef8      	MOV  R15,R24
000434 9726      	SBIW R28,6
000435 940e 0705 	CALL __SAVELOCR4
000437 940e 06ac 	CALL SUBOPT_0x10
000439 9730      	SBIW R30,0
00043a f419      	BRNE _0x2020072
00043b efef      	LDI  R30,LOW(65535)
00043c efff      	LDI  R31,HIGH(65535)
00043d c01d      	RJMP _0x2080004
                 _0x2020072:
00043e 01de      	MOVW R26,R28
00043f 9616      	ADIW R26,6
000440 940e 06e1 	CALL __ADDW2R15
000442 018d      	MOVW R16,R26
000443 940e 06ac 	CALL SUBOPT_0x10
000445 83ee      	STD  Y+6,R30
000446 83ff      	STD  Y+6+1,R31
000447 e0e0      	LDI  R30,LOW(0)
000448 87e8      	STD  Y+8,R30
000449 87e9      	STD  Y+8+1,R30
00044a 01de      	MOVW R26,R28
00044b 961a      	ADIW R26,10
00044c 940e 06b3 	CALL SUBOPT_0x11
00044e ece5      	LDI  R30,LOW(_put_buff_G101)
00044f e0f2      	LDI  R31,HIGH(_put_buff_G101)
000450 93fa      	ST   -Y,R31
000451 93ea      	ST   -Y,R30
000452 01de      	MOVW R26,R28
000453 961a      	ADIW R26,10
000454 dea9      	RCALL __print_G101
000455 019f      	MOVW R18,R30
000456 81ae      	LDD  R26,Y+6
000457 81bf      	LDD  R27,Y+6+1
000458 e0e0      	LDI  R30,LOW(0)
000459 93ec      	ST   X,R30
00045a 01f9      	MOVW R30,R18
                 _0x2080004:
00045b 940e 070c 	CALL __LOADLOCR4
00045d 962a      	ADIW R28,10
00045e 90ff      	POP  R15
00045f 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000460 92ff      	PUSH R15
000461 2ef8      	MOV  R15,R24
000462 9726      	SBIW R28,6
000463 931a      	ST   -Y,R17
000464 930a      	ST   -Y,R16
000465 01de      	MOVW R26,R28
000466 9614      	ADIW R26,4
000467 940e 06e1 	CALL __ADDW2R15
000469 018d      	MOVW R16,R26
00046a e0e0      	LDI  R30,LOW(0)
00046b 83ec      	STD  Y+4,R30
00046c 83ed      	STD  Y+4+1,R30
00046d 83ee      	STD  Y+6,R30
00046e 83ef      	STD  Y+6+1,R30
00046f 01de      	MOVW R26,R28
000470 9618      	ADIW R26,8
000471 940e 06b3 	CALL SUBOPT_0x11
000473 ebea      	LDI  R30,LOW(_put_usart_G101)
000474 e0f2      	LDI  R31,HIGH(_put_usart_G101)
000475 93fa      	ST   -Y,R31
000476 93ea      	ST   -Y,R30
000477 01de      	MOVW R26,R28
000478 9618      	ADIW R26,8
000479 de84      	RCALL __print_G101
00047a 8119      	LDD  R17,Y+1
00047b 8108      	LDD  R16,Y+0
00047c 9628      	ADIW R28,8
00047d 90ff      	POP  R15
00047e 9508      	RET
                 ; .FEND
                 _get_usart_G101:
                 ; .FSTART _get_usart_G101
00047f 93ba      	ST   -Y,R27
000480 93aa      	ST   -Y,R26
000481 931a      	ST   -Y,R17
000482 81a9      	LDD  R26,Y+1
000483 81ba      	LDD  R27,Y+1+1
000484 e0e0      	LDI  R30,LOW(0)
000485 93ec      	ST   X,R30
000486 81ab      	LDD  R26,Y+3
000487 81bc      	LDD  R27,Y+3+1
000488 91ec      	LD   R30,X
000489 2f1e      	MOV  R17,R30
00048a 30e0      	CPI  R30,0
00048b f019      	BREQ _0x2020078
00048c e0e0      	LDI  R30,LOW(0)
00048d 93ec      	ST   X,R30
00048e c003      	RJMP _0x2020079
                 _0x2020078:
00048f 940e 00aa 	CALL _getchar
000491 2f1e      	MOV  R17,R30
                 _0x2020079:
000492 2fe1      	MOV  R30,R17
000493 8118      	LDD  R17,Y+0
                 _0x2080003:
000494 9625      	ADIW R28,5
000495 9508      	RET
                 ; .FEND
                 __scanf_G101:
                 ; .FSTART __scanf_G101
000496 92ff      	PUSH R15
000497 93ba      	ST   -Y,R27
000498 93aa      	ST   -Y,R26
000499 9724      	SBIW R28,4
00049a 940e 0703 	CALL __SAVELOCR6
00049c e0e0      	LDI  R30,LOW(0)
00049d e0f0      	LDI  R31,HIGH(0)
00049e 87e8      	STD  Y+8,R30
00049f 87f9      	STD  Y+8+1,R31
0004a0 2f4e      	MOV  R20,R30
                 _0x202007F:
0004a1 89e8      	LDD  R30,Y+16
0004a2 89f9      	LDD  R31,Y+16+1
0004a3 9631      	ADIW R30,1
0004a4 8be8      	STD  Y+16,R30
0004a5 8bf9      	STD  Y+16+1,R31
0004a6 9731      	SBIW R30,1
0004a7 91e4      	LPM  R30,Z
0004a8 2f3e      	MOV  R19,R30
0004a9 30e0      	CPI  R30,0
0004aa f409      	BRNE PC+2
0004ab c125      	RJMP _0x2020081
0004ac 940e 06bc 	CALL SUBOPT_0x12
0004ae f0c1      	BREQ _0x2020082
                 _0x2020083:
0004af b7ed      	IN   R30,SPL
0004b0 b7fe      	IN   R31,SPH
0004b1 93fa      	ST   -Y,R31
0004b2 93ea      	ST   -Y,R30
0004b3 934f      	PUSH R20
0004b4 940e 06c1 	CALL SUBOPT_0x13
0004b6 914f      	POP  R20
0004b7 2f3e      	MOV  R19,R30
0004b8 30e0      	CPI  R30,0
0004b9 f019      	BREQ _0x2020086
0004ba 940e 06bc 	CALL SUBOPT_0x12
0004bc f409      	BRNE _0x2020087
                 _0x2020086:
0004bd c007      	RJMP _0x2020085
                 _0x2020087:
0004be 940e 06c7 	CALL SUBOPT_0x14
0004c0 f41c      	BRGE _0x2020088
0004c1 efef      	LDI  R30,LOW(65535)
0004c2 efff      	LDI  R31,HIGH(65535)
0004c3 c10f      	RJMP _0x2080001
                 _0x2020088:
0004c4 cfea      	RJMP _0x2020083
                 _0x2020085:
0004c5 2f43      	MOV  R20,R19
0004c6 c109      	RJMP _0x2020089
                 _0x2020082:
0004c7 3235      	CPI  R19,37
0004c8 f009      	BREQ PC+2
0004c9 c0ee      	RJMP _0x202008A
0004ca e050      	LDI  R21,LOW(0)
                 _0x202008B:
0004cb 89e8      	LDD  R30,Y+16
0004cc 89f9      	LDD  R31,Y+16+1
0004cd 9135      	LPM  R19,Z+
0004ce 8be8      	STD  Y+16,R30
0004cf 8bf9      	STD  Y+16+1,R31
0004d0 3330      	CPI  R19,48
0004d1 f010      	BRLO _0x202008F
0004d2 333a      	CPI  R19,58
0004d3 f008      	BRLO _0x202008E
                 _0x202008F:
0004d4 c007      	RJMP _0x202008D
                 _0x202008E:
0004d5 e0aa      	LDI  R26,LOW(10)
0004d6 9f5a      	MUL  R21,R26
0004d7 2d50      	MOV  R21,R0
0004d8 2fe3      	MOV  R30,R19
0004d9 53e0      	SUBI R30,LOW(48)
0004da 0f5e      	ADD  R21,R30
0004db cfef      	RJMP _0x202008B
                 _0x202008D:
0004dc 3030      	CPI  R19,0
0004dd f409      	BRNE _0x2020091
0004de c0f2      	RJMP _0x2020081
                 _0x2020091:
                 _0x2020092:
0004df b7ed      	IN   R30,SPL
0004e0 b7fe      	IN   R31,SPH
0004e1 93fa      	ST   -Y,R31
0004e2 93ea      	ST   -Y,R30
0004e3 934f      	PUSH R20
0004e4 940e 06c1 	CALL SUBOPT_0x13
0004e6 914f      	POP  R20
0004e7 2f2e      	MOV  R18,R30
0004e8 2fae      	MOV  R26,R30
0004e9 940e 05fe 	CALL _isspace
0004eb 30e0      	CPI  R30,0
0004ec f039      	BREQ _0x2020094
0004ed 940e 06c7 	CALL SUBOPT_0x14
0004ef f41c      	BRGE _0x2020095
0004f0 efef      	LDI  R30,LOW(65535)
0004f1 efff      	LDI  R31,HIGH(65535)
0004f2 c0e0      	RJMP _0x2080001
                 _0x2020095:
0004f3 cfeb      	RJMP _0x2020092
                 _0x2020094:
0004f4 3020      	CPI  R18,0
0004f5 f409      	BRNE _0x2020096
0004f6 c0d1      	RJMP _0x2020097
                 _0x2020096:
0004f7 2f42      	MOV  R20,R18
0004f8 3050      	CPI  R21,0
0004f9 f409      	BRNE _0x2020098
0004fa ef5f      	LDI  R21,LOW(255)
                 _0x2020098:
0004fb 2fe3      	MOV  R30,R19
0004fc 36e3      	CPI  R30,LOW(0x63)
0004fd f499      	BRNE _0x202009C
0004fe 940e 06cc 	CALL SUBOPT_0x15
000500 b7ed      	IN   R30,SPL
000501 b7fe      	IN   R31,SPH
000502 93fa      	ST   -Y,R31
000503 93ea      	ST   -Y,R30
000504 934f      	PUSH R20
000505 940e 06c1 	CALL SUBOPT_0x13
000507 914f      	POP  R20
000508 01d8      	MOVW R26,R16
000509 93ec      	ST   X,R30
00050a 940e 06c7 	CALL SUBOPT_0x14
00050c f41c      	BRGE _0x202009D
00050d efef      	LDI  R30,LOW(65535)
00050e efff      	LDI  R31,HIGH(65535)
00050f c0c3      	RJMP _0x2080001
                 _0x202009D:
000510 c0a1      	RJMP _0x202009B
                 _0x202009C:
000511 37e3      	CPI  R30,LOW(0x73)
000512 f541      	BRNE _0x20200A6
000513 940e 06cc 	CALL SUBOPT_0x15
                 _0x202009F:
000515 2fe5      	MOV  R30,R21
000516 5051      	SUBI R21,1
000517 30e0      	CPI  R30,0
000518 f0f1      	BREQ _0x20200A1
000519 b7ed      	IN   R30,SPL
00051a b7fe      	IN   R31,SPH
00051b 93fa      	ST   -Y,R31
00051c 93ea      	ST   -Y,R30
00051d 934f      	PUSH R20
00051e 940e 06c1 	CALL SUBOPT_0x13
000520 914f      	POP  R20
000521 2f3e      	MOV  R19,R30
000522 30e0      	CPI  R30,0
000523 f019      	BREQ _0x20200A3
000524 940e 06bc 	CALL SUBOPT_0x12
000526 f039      	BREQ _0x20200A2
                 _0x20200A3:
000527 940e 06c7 	CALL SUBOPT_0x14
000529 f41c      	BRGE _0x20200A5
00052a efef      	LDI  R30,LOW(65535)
00052b efff      	LDI  R31,HIGH(65535)
00052c c0a6      	RJMP _0x2080001
                 _0x20200A5:
00052d c009      	RJMP _0x20200A1
                 _0x20200A2:
00052e 931f      	PUSH R17
00052f 930f      	PUSH R16
                +
000530 5f0f     +SUBI R16 , LOW ( - 1 )
000531 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000532 2fe3      	MOV  R30,R19
000533 91af      	POP  R26
000534 91bf      	POP  R27
000535 93ec      	ST   X,R30
000536 cfde      	RJMP _0x202009F
                 _0x20200A1:
000537 01d8      	MOVW R26,R16
000538 e0e0      	LDI  R30,LOW(0)
000539 93ec      	ST   X,R30
00053a c077      	RJMP _0x202009B
                 _0x20200A6:
00053b 9468      	SET
00053c f8f1      	BLD  R15,1
00053d 94e8      	CLT
00053e f8f2      	BLD  R15,2
00053f 2fe3      	MOV  R30,R19
000540 36e4      	CPI  R30,LOW(0x64)
000541 f011      	BREQ _0x20200AB
000542 36e9      	CPI  R30,LOW(0x69)
000543 f419      	BRNE _0x20200AC
                 _0x20200AB:
000544 94e8      	CLT
000545 f8f1      	BLD  R15,1
000546 c002      	RJMP _0x20200AD
                 _0x20200AC:
000547 37e5      	CPI  R30,LOW(0x75)
000548 f411      	BRNE _0x20200AE
                 _0x20200AD:
000549 e02a      	LDI  R18,LOW(10)
00054a c008      	RJMP _0x20200A9
                 _0x20200AE:
00054b 37e8      	CPI  R30,LOW(0x78)
00054c f411      	BRNE _0x20200AF
00054d e120      	LDI  R18,LOW(16)
00054e c004      	RJMP _0x20200A9
                 _0x20200AF:
00054f 32e5      	CPI  R30,LOW(0x25)
000550 f409      	BRNE _0x20200B2
000551 c066      	RJMP _0x20200B1
                 _0x20200B2:
000552 c07e      	RJMP _0x2080002
                 _0x20200A9:
000553 e0e0      	LDI  R30,LOW(0)
000554 83ee      	STD  Y+6,R30
000555 83ef      	STD  Y+6+1,R30
000556 9468      	SET
000557 f8f0      	BLD  R15,0
                 _0x20200B3:
000558 2fe5      	MOV  R30,R21
000559 5051      	SUBI R21,1
00055a 30e0      	CPI  R30,0
00055b f409      	BRNE PC+2
00055c c046      	RJMP _0x20200B5
00055d b7ed      	IN   R30,SPL
00055e b7fe      	IN   R31,SPH
00055f 93fa      	ST   -Y,R31
000560 93ea      	ST   -Y,R30
000561 934f      	PUSH R20
000562 940e 06c1 	CALL SUBOPT_0x13
000564 914f      	POP  R20
000565 2f3e      	MOV  R19,R30
000566 32e1      	CPI  R30,LOW(0x21)
000567 f438      	BRSH _0x20200B6
000568 940e 06c7 	CALL SUBOPT_0x14
00056a f41c      	BRGE _0x20200B7
00056b efef      	LDI  R30,LOW(65535)
00056c efff      	LDI  R31,HIGH(65535)
00056d c065      	RJMP _0x2080001
                 _0x20200B7:
00056e c017      	RJMP _0x20200B8
                 _0x20200B6:
00056f fcf1      	SBRC R15,1
000570 c008      	RJMP _0x20200B9
000571 9468      	SET
000572 f8f1      	BLD  R15,1
000573 323d      	CPI  R19,45
000574 f411      	BRNE _0x20200BA
000575 f8f2      	BLD  R15,2
000576 cfe1      	RJMP _0x20200B3
                 _0x20200BA:
000577 323b      	CPI  R19,43
000578 f2f9      	BREQ _0x20200B3
                 _0x20200B9:
000579 3120      	CPI  R18,16
00057a f431      	BRNE _0x20200BC
00057b 2fa3      	MOV  R26,R19
00057c 940e 0609 	CALL _isxdigit
00057e 30e0      	CPI  R30,0
00057f f031      	BREQ _0x20200B8
000580 c009      	RJMP _0x20200BE
                 _0x20200BC:
000581 2fa3      	MOV  R26,R19
000582 940e 05f5 	CALL _isdigit
000584 30e0      	CPI  R30,0
000585 f421      	BRNE _0x20200BF
                 _0x20200B8:
000586 fcf0      	SBRC R15,0
000587 c049      	RJMP _0x20200C1
000588 2f43      	MOV  R20,R19
000589 c019      	RJMP _0x20200B5
                 _0x20200BF:
                 _0x20200BE:
00058a 3631      	CPI  R19,97
00058b f010      	BRLO _0x20200C2
00058c 5537      	SUBI R19,LOW(87)
00058d c005      	RJMP _0x20200C3
                 _0x20200C2:
00058e 3431      	CPI  R19,65
00058f f010      	BRLO _0x20200C4
000590 5337      	SUBI R19,LOW(55)
000591 c001      	RJMP _0x20200C5
                 _0x20200C4:
000592 5330      	SUBI R19,LOW(48)
                 _0x20200C5:
                 _0x20200C3:
000593 2fe2      	MOV  R30,R18
000594 81ae      	LDD  R26,Y+6
000595 81bf      	LDD  R27,Y+6+1
000596 e0f0      	LDI  R31,0
000597 940e 06ee 	CALL __MULW12U
000599 01df      	MOVW R26,R30
00059a 2fe3      	MOV  R30,R19
00059b e0f0      	LDI  R31,0
00059c 0fea      	ADD  R30,R26
00059d 1ffb      	ADC  R31,R27
00059e 83ee      	STD  Y+6,R30
00059f 83ff      	STD  Y+6+1,R31
0005a0 94e8      	CLT
0005a1 f8f0      	BLD  R15,0
0005a2 cfb5      	RJMP _0x20200B3
                 _0x20200B5:
0005a3 940e 06cc 	CALL SUBOPT_0x15
0005a5 fef2      	SBRS R15,2
0005a6 c006      	RJMP _0x20200C6
0005a7 81ee      	LDD  R30,Y+6
0005a8 81ff      	LDD  R31,Y+6+1
0005a9 940e 06e5 	CALL __ANEGW1
0005ab 83ee      	STD  Y+6,R30
0005ac 83ff      	STD  Y+6+1,R31
                 _0x20200C6:
0005ad 81ee      	LDD  R30,Y+6
0005ae 81ff      	LDD  R31,Y+6+1
0005af 01d8      	MOVW R26,R16
0005b0 93ed      	ST   X+,R30
0005b1 93fc      	ST   X,R31
                 _0x202009B:
0005b2 85e8      	LDD  R30,Y+8
0005b3 85f9      	LDD  R31,Y+8+1
0005b4 9631      	ADIW R30,1
0005b5 87e8      	STD  Y+8,R30
0005b6 87f9      	STD  Y+8+1,R31
0005b7 c018      	RJMP _0x20200C7
                 _0x202008A:
                 _0x20200B1:
0005b8 b7ed      	IN   R30,SPL
0005b9 b7fe      	IN   R31,SPH
0005ba 93fa      	ST   -Y,R31
0005bb 93ea      	ST   -Y,R30
0005bc 934f      	PUSH R20
0005bd 940e 06c1 	CALL SUBOPT_0x13
0005bf 914f      	POP  R20
0005c0 17e3      	CP   R30,R19
0005c1 f071      	BREQ _0x20200C8
0005c2 940e 06c7 	CALL SUBOPT_0x14
0005c4 f41c      	BRGE _0x20200C9
0005c5 efef      	LDI  R30,LOW(65535)
0005c6 efff      	LDI  R31,HIGH(65535)
0005c7 c00b      	RJMP _0x2080001
                 _0x20200C9:
                 _0x2020097:
0005c8 85e8      	LDD  R30,Y+8
0005c9 85f9      	LDD  R31,Y+8+1
0005ca 9730      	SBIW R30,0
0005cb f419      	BRNE _0x20200CA
0005cc efef      	LDI  R30,LOW(65535)
0005cd efff      	LDI  R31,HIGH(65535)
0005ce c004      	RJMP _0x2080001
                 _0x20200CA:
0005cf c001      	RJMP _0x2020081
                 _0x20200C8:
                 _0x20200C7:
                 _0x2020089:
0005d0 ced0      	RJMP _0x202007F
                 _0x2020081:
                 _0x20200C1:
                 _0x2080002:
0005d1 85e8      	LDD  R30,Y+8
0005d2 85f9      	LDD  R31,Y+8+1
                 _0x2080001:
0005d3 940e 070a 	CALL __LOADLOCR6
0005d5 9662      	ADIW R28,18
0005d6 90ff      	POP  R15
0005d7 9508      	RET
                 ; .FEND
                 _scanf:
                 ; .FSTART _scanf
0005d8 92ff      	PUSH R15
0005d9 2ef8      	MOV  R15,R24
0005da 9723      	SBIW R28,3
0005db 931a      	ST   -Y,R17
0005dc 930a      	ST   -Y,R16
0005dd 01de      	MOVW R26,R28
0005de 9611      	ADIW R26,1
0005df 940e 06e1 	CALL __ADDW2R15
0005e1 018d      	MOVW R16,R26
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 83eb      	STD  Y+3,R30
0005e4 83ec      	STD  Y+3+1,R30
0005e5 01de      	MOVW R26,R28
0005e6 9615      	ADIW R26,5
0005e7 940e 06b3 	CALL SUBOPT_0x11
0005e9 e7ef      	LDI  R30,LOW(_get_usart_G101)
0005ea e0f4      	LDI  R31,HIGH(_get_usart_G101)
0005eb 93fa      	ST   -Y,R31
0005ec 93ea      	ST   -Y,R30
0005ed 01de      	MOVW R26,R28
0005ee 9618      	ADIW R26,8
0005ef dea6      	RCALL __scanf_G101
0005f0 8119      	LDD  R17,Y+1
0005f1 8108      	LDD  R16,Y+0
0005f2 9625      	ADIW R28,5
0005f3 90ff      	POP  R15
0005f4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0005f5 93aa      	ST   -Y,R26
0005f6 e0e1          ldi  r30,1
0005f7 91f9          ld   r31,y+
0005f8 33f0          cpi  r31,'0'
0005f9 f010          brlo isdigit0
0005fa 33fa          cpi  r31,'9'+1
0005fb f008          brlo isdigit1
                 isdigit0:
0005fc 27ee          clr  r30
                 isdigit1:
0005fd 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0005fe 93aa      	ST   -Y,R26
0005ff e0e1          ldi  r30,1
000600 91f9          ld   r31,y+
000601 32f0          cpi  r31,' '
000602 f029          breq isspace1
000603 30f9          cpi  r31,9
000604 f010          brlo isspace0
000605 30fe          cpi  r31,13+1
000606 f008          brlo isspace1
                 isspace0:
000607 27ee          clr  r30
                 isspace1:
000608 9508          ret
                 ; .FEND
                 _isxdigit:
                 ; .FSTART _isxdigit
000609 93aa      	ST   -Y,R26
00060a e0e1          ldi  r30,1
00060b 91f9          ld   r31,y+
00060c 53f0          subi r31,0x30
00060d f040          brcs isxdigit0
00060e 30fa          cpi  r31,10
00060f f038          brcs isxdigit1
000610 75ff          andi r31,0x5f
000611 50f7          subi r31,7
000612 30fa          cpi  r31,10
000613 f010          brcs isxdigit0
000614 31f0          cpi  r31,16
000615 f008          brcs isxdigit1
                 isxdigit0:
000616 27ee          clr  r30
                 isxdigit1:
000617 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000618 93ba      	ST   -Y,R27
000619 93aa      	ST   -Y,R26
00061a 91a9          ld   r26,y+
00061b 91b9          ld   r27,y+
00061c 27ee          clr  r30
00061d 27ff          clr  r31
                 strlen0:
00061e 916d          ld   r22,x+
00061f 2366          tst  r22
000620 f011          breq strlen1
000621 9631          adiw r30,1
000622 cffb          rjmp strlen0
                 strlen1:
000623 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000624 93ba      	ST   -Y,R27
000625 93aa      	ST   -Y,R26
000626 27aa          clr  r26
000627 27bb          clr  r27
000628 91e9          ld   r30,y+
000629 91f9          ld   r31,y+
                 strlenf0:
00062a 9005      	lpm  r0,z+
00062b 2000          tst  r0
00062c f011          breq strlenf1
00062d 9611          adiw r26,1
00062e cffb          rjmp strlenf0
                 strlenf1:
00062f 01fd          movw r30,r26
000630 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000262           	.BYTE 0xA
                 _m1:
00026c           	.BYTE 0x2
                 _m2:
00026e           	.BYTE 0x2
                 _t:
000270           	.BYTE 0x2
                 _rx_buffer:
000272           	.BYTE 0x8
                 _rx_rd_index:
00027a           	.BYTE 0x1
                 _rx_counter:
00027b           	.BYTE 0x1
                 _tx_buffer:
00027c           	.BYTE 0x8
                 _tx_wr_index:
000284           	.BYTE 0x1
                 _tx_rd_index:
000285           	.BYTE 0x1
                 _tx_counter:
000286           	.BYTE 0x1
                 __base_y_G100:
000287           	.BYTE 0x4
                 __lcd_x:
00028b           	.BYTE 0x1
                 __lcd_y:
00028c           	.BYTE 0x1
                 __lcd_maxx:
00028d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000631 98c1      	CBI  0x18,1
000632 98c2      	CBI  0x18,2
                +
000633 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000634 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000635 93fa      	ST   -Y,R31
000636 93ea      	ST   -Y,R30
000637 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1:
000638 27ff      	CLR  R31
000639 2766      	CLR  R22
00063a 2777      	CLR  R23
00063b 940e 06fe 	CALL __PUTPARD1
00063d e084      	LDI  R24,4
00063e 940e 0460 	CALL _printf
000640 9626      	ADIW R28,6
                +
000641 e7e6     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000642 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
000643 93fa      	ST   -Y,R31
000644 93ea      	ST   -Y,R30
000645 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000646 940e 06fe 	CALL __PUTPARD1
000648 e084      	LDI  R24,4
000649 940e 05d8 	CALL _scanf
00064b 9626      	ADIW R28,6
00064c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
                +
00064d e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00064e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00064f 93fa      	ST   -Y,R31
000650 93ea      	ST   -Y,R30
000651 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000652 93e0 026c 	STS  _m1,R30
000654 93f0 026d 	STS  _m1+1,R31
000656 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000657 940e 06e9 	CALL __CWD1
000659 940e 06fe 	CALL __PUTPARD1
00065b e084      	LDI  R24,4
00065c 940e 0460 	CALL _printf
00065e 9626      	ADIW R28,6
00065f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000660 940e 06e9 	CALL __CWD1
000662 940e 06fe 	CALL __PUTPARD1
000664 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000665 e088      	LDI  R24,8
000666 940e 0432 	CALL _sprintf
000668 962c      	ADIW R28,12
000669 940e 024d 	CALL _lcd_clear
00066b e6a2      	LDI  R26,LOW(_str)
00066c e0b2      	LDI  R27,HIGH(_str)
00066d 940e 027b 	CALL _lcd_puts
00066f efa4      	LDI  R26,LOW(500)
000670 e0b1      	LDI  R27,HIGH(500)
000671 940c 06d7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000673 940e 0230 	CALL __lcd_write_data
000675 e0a3      	LDI  R26,LOW(3)
000676 e0b0      	LDI  R27,0
000677 940c 06d7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
000679 e3a0      	LDI  R26,LOW(48)
00067a 940e 021c 	CALL __lcd_write_nibble_G100
                +
00067c ec88     +LDI R24 , LOW ( 200 )
00067d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00067e 9701     +SBIW R24 , 1
00067f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000680 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000681 91ed      	LD   R30,X+
000682 91fd      	LD   R31,X+
000683 9631      	ADIW R30,1
000684 93fe      	ST   -X,R31
000685 93ee      	ST   -X,R30
000686 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xB:
000687 932a      	ST   -Y,R18
000688 85ad      	LDD  R26,Y+13
000689 85be      	LDD  R27,Y+13+1
00068a 85ef      	LDD  R30,Y+15
00068b 89f8      	LDD  R31,Y+15+1
00068c 9509      	ICALL
00068d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
00068e 89e8      	LDD  R30,Y+16
00068f 89f9      	LDD  R31,Y+16+1
000690 9734      	SBIW R30,4
000691 8be8      	STD  Y+16,R30
000692 8bf9      	STD  Y+16+1,R31
000693 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000694 85ad      	LDD  R26,Y+13
000695 85be      	LDD  R27,Y+13+1
000696 85ef      	LDD  R30,Y+15
000697 89f8      	LDD  R31,Y+15+1
000698 9509      	ICALL
000699 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
00069a 89a8      	LDD  R26,Y+16
00069b 89b9      	LDD  R27,Y+16+1
00069c 9614      	ADIW R26,4
00069d 940e 06f6 	CALL __GETW1P
00069f 83ee      	STD  Y+6,R30
0006a0 83ff      	STD  Y+6+1,R31
0006a1 81ae      	LDD  R26,Y+6
0006a2 81bf      	LDD  R27,Y+6+1
0006a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
0006a4 89a8      	LDD  R26,Y+16
0006a5 89b9      	LDD  R27,Y+16+1
0006a6 9614      	ADIW R26,4
0006a7 940e 06f6 	CALL __GETW1P
0006a9 87ea      	STD  Y+10,R30
0006aa 87fb      	STD  Y+10+1,R31
0006ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0006ac 01de      	MOVW R26,R28
0006ad 961c      	ADIW R26,12
0006ae 940e 06e1 	CALL __ADDW2R15
0006b0 940e 06f6 	CALL __GETW1P
0006b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x11:
0006b3 940e 06e1 	CALL __ADDW2R15
0006b5 940e 06f6 	CALL __GETW1P
0006b7 93fa      	ST   -Y,R31
0006b8 93ea      	ST   -Y,R30
0006b9 931a      	ST   -Y,R17
0006ba 930a      	ST   -Y,R16
0006bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0006bc 2fa3      	MOV  R26,R19
0006bd 940e 05fe 	CALL _isspace
0006bf 30e0      	CPI  R30,0
0006c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x13:
0006c1 85ac      	LDD  R26,Y+12
0006c2 85bd      	LDD  R27,Y+12+1
0006c3 85ee      	LDD  R30,Y+14
0006c4 85ff      	LDD  R31,Y+14+1
0006c5 9509      	ICALL
0006c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x14:
0006c7 85aa      	LDD  R26,Y+10
0006c8 85bb      	LDD  R27,Y+10+1
0006c9 91ac      	LD   R26,X
0006ca 30a0      	CPI  R26,0
0006cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x15:
0006cc 85ee      	LDD  R30,Y+14
0006cd 85ff      	LDD  R31,Y+14+1
0006ce 9734      	SBIW R30,4
0006cf 87ee      	STD  Y+14,R30
0006d0 87ff      	STD  Y+14+1,R31
0006d1 85ae      	LDD  R26,Y+14
0006d2 85bf      	LDD  R27,Y+14+1
0006d3 9614      	ADIW R26,4
0006d4 910d      	LD   R16,X+
0006d5 911c      	LD   R17,X
0006d6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0006d7 9610      	adiw r26,0
0006d8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0006d9 ed80     +LDI R24 , LOW ( 0x7D0 )
0006da e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0006db 9701     +SBIW R24 , 1
0006dc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0006dd 95a8      	wdr
0006de 9711      	sbiw r26,1
0006df f7c9      	brne __delay_ms0
                 __delay_ms1:
0006e0 9508      	ret
                 
                 __ADDW2R15:
0006e1 2400      	CLR  R0
0006e2 0daf      	ADD  R26,R15
0006e3 1db0      	ADC  R27,R0
0006e4 9508      	RET
                 
                 __ANEGW1:
0006e5 95f1      	NEG  R31
0006e6 95e1      	NEG  R30
0006e7 40f0      	SBCI R31,0
0006e8 9508      	RET
                 
                 __CWD1:
0006e9 2f6f      	MOV  R22,R31
0006ea 0f66      	ADD  R22,R22
0006eb 0b66      	SBC  R22,R22
0006ec 2f76      	MOV  R23,R22
0006ed 9508      	RET
                 
                 __MULW12U:
0006ee 9ffa      	MUL  R31,R26
0006ef 2df0      	MOV  R31,R0
0006f0 9feb      	MUL  R30,R27
0006f1 0df0      	ADD  R31,R0
0006f2 9fea      	MUL  R30,R26
0006f3 2de0      	MOV  R30,R0
0006f4 0df1      	ADD  R31,R1
0006f5 9508      	RET
                 
                 __GETW1P:
0006f6 91ed      	LD   R30,X+
0006f7 91fc      	LD   R31,X
0006f8 9711      	SBIW R26,1
0006f9 9508      	RET
                 
                 __GETW1PF:
0006fa 9005      	LPM  R0,Z+
0006fb 91f4      	LPM  R31,Z
0006fc 2de0      	MOV  R30,R0
0006fd 9508      	RET
                 
                 __PUTPARD1:
0006fe 937a      	ST   -Y,R23
0006ff 936a      	ST   -Y,R22
000700 93fa      	ST   -Y,R31
000701 93ea      	ST   -Y,R30
000702 9508      	RET
                 
                 __SAVELOCR6:
000703 935a      	ST   -Y,R21
                 __SAVELOCR5:
000704 934a      	ST   -Y,R20
                 __SAVELOCR4:
000705 933a      	ST   -Y,R19
                 __SAVELOCR3:
000706 932a      	ST   -Y,R18
                 __SAVELOCR2:
000707 931a      	ST   -Y,R17
000708 930a      	ST   -Y,R16
000709 9508      	RET
                 
                 __LOADLOCR6:
00070a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00070b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00070c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00070d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00070e 8119      	LDD  R17,Y+1
00070f 8108      	LD   R16,Y
000710 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  15 r1 :   2 r2 :   1 r3 :   0 r4 :   5 r5 :   4 r6 :  11 r7 :   6 
r8 :   1 r9 :   1 r10:   4 r11:   1 r12:   1 r13:   1 r14:   0 r15:  22 
r16:  50 r17:  44 r18:  36 r19:  35 r20:  25 r21:  27 r22:  15 r23:   6 
r24:  28 r25:   5 r26: 174 r27:  55 r28:  29 r29:   1 r30: 431 r31: 173 
x  :  30 y  : 288 z  :  21 
Registers used: 33 out of 35 (94.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   8 
adiw  :  38 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   8 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   4 break :   0 breq  :  33 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   3 brmi  :   1 brne  :  58 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 117 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  14 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   0 
cp    :  13 cpc   :   9 cpi   :  79 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 
in    :  18 inc   :   1 jmp   :  25 ld    :  43 ldd   : 112 ldi   : 198 
lds   :  27 lpm   :  17 lsl   :   0 lsr   :   0 mov   :  51 movw  :  32 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  49 pop   :  12 push  :  12 rcall :  18 ret   :  46 
reti  :   1 rjmp  : 115 rol   :   0 ror   :   0 sbc   :   6 sbci  :   7 
sbi   :   7 sbic  :   1 sbis  :   0 sbiw  :  28 sbr   :   0 sbrc  :   4 
sbrs  :  11 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 116 std   :  54 sts   :  32 sub   :   5 subi  :  41 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e22   3526     92   3618   32768  11.0%
[.dseg] 0x000060 0x00028e      0     46     46    2048   2.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
